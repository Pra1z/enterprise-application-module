package com.pratz.dao.table.model;

import java.util.ArrayList;
import java.util.List;

public class PartsCriteria {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table SYSTEM_LOBS.PARTS
     *
     * @mbggenerated Sat Mar 21 14:24:50 ICT 2015
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table SYSTEM_LOBS.PARTS
     *
     * @mbggenerated Sat Mar 21 14:24:50 ICT 2015
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table SYSTEM_LOBS.PARTS
     *
     * @mbggenerated Sat Mar 21 14:24:50 ICT 2015
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SYSTEM_LOBS.PARTS
     *
     * @mbggenerated Sat Mar 21 14:24:50 ICT 2015
     */
    public PartsCriteria() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SYSTEM_LOBS.PARTS
     *
     * @mbggenerated Sat Mar 21 14:24:50 ICT 2015
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SYSTEM_LOBS.PARTS
     *
     * @mbggenerated Sat Mar 21 14:24:50 ICT 2015
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SYSTEM_LOBS.PARTS
     *
     * @mbggenerated Sat Mar 21 14:24:50 ICT 2015
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SYSTEM_LOBS.PARTS
     *
     * @mbggenerated Sat Mar 21 14:24:50 ICT 2015
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SYSTEM_LOBS.PARTS
     *
     * @mbggenerated Sat Mar 21 14:24:50 ICT 2015
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SYSTEM_LOBS.PARTS
     *
     * @mbggenerated Sat Mar 21 14:24:50 ICT 2015
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SYSTEM_LOBS.PARTS
     *
     * @mbggenerated Sat Mar 21 14:24:50 ICT 2015
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SYSTEM_LOBS.PARTS
     *
     * @mbggenerated Sat Mar 21 14:24:50 ICT 2015
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SYSTEM_LOBS.PARTS
     *
     * @mbggenerated Sat Mar 21 14:24:50 ICT 2015
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SYSTEM_LOBS.PARTS
     *
     * @mbggenerated Sat Mar 21 14:24:50 ICT 2015
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table SYSTEM_LOBS.PARTS
     *
     * @mbggenerated Sat Mar 21 14:24:50 ICT 2015
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andLobIdIsNull() {
            addCriterion("LOB_ID is null");
            return (Criteria) this;
        }

        public Criteria andLobIdIsNotNull() {
            addCriterion("LOB_ID is not null");
            return (Criteria) this;
        }

        public Criteria andLobIdEqualTo(Long value) {
            addCriterion("LOB_ID =", value, "lobId");
            return (Criteria) this;
        }

        public Criteria andLobIdNotEqualTo(Long value) {
            addCriterion("LOB_ID <>", value, "lobId");
            return (Criteria) this;
        }

        public Criteria andLobIdGreaterThan(Long value) {
            addCriterion("LOB_ID >", value, "lobId");
            return (Criteria) this;
        }

        public Criteria andLobIdGreaterThanOrEqualTo(Long value) {
            addCriterion("LOB_ID >=", value, "lobId");
            return (Criteria) this;
        }

        public Criteria andLobIdLessThan(Long value) {
            addCriterion("LOB_ID <", value, "lobId");
            return (Criteria) this;
        }

        public Criteria andLobIdLessThanOrEqualTo(Long value) {
            addCriterion("LOB_ID <=", value, "lobId");
            return (Criteria) this;
        }

        public Criteria andLobIdIn(List<Long> values) {
            addCriterion("LOB_ID in", values, "lobId");
            return (Criteria) this;
        }

        public Criteria andLobIdNotIn(List<Long> values) {
            addCriterion("LOB_ID not in", values, "lobId");
            return (Criteria) this;
        }

        public Criteria andLobIdBetween(Long value1, Long value2) {
            addCriterion("LOB_ID between", value1, value2, "lobId");
            return (Criteria) this;
        }

        public Criteria andLobIdNotBetween(Long value1, Long value2) {
            addCriterion("LOB_ID not between", value1, value2, "lobId");
            return (Criteria) this;
        }

        public Criteria andBlockOffsetIsNull() {
            addCriterion("BLOCK_OFFSET is null");
            return (Criteria) this;
        }

        public Criteria andBlockOffsetIsNotNull() {
            addCriterion("BLOCK_OFFSET is not null");
            return (Criteria) this;
        }

        public Criteria andBlockOffsetEqualTo(Integer value) {
            addCriterion("BLOCK_OFFSET =", value, "blockOffset");
            return (Criteria) this;
        }

        public Criteria andBlockOffsetNotEqualTo(Integer value) {
            addCriterion("BLOCK_OFFSET <>", value, "blockOffset");
            return (Criteria) this;
        }

        public Criteria andBlockOffsetGreaterThan(Integer value) {
            addCriterion("BLOCK_OFFSET >", value, "blockOffset");
            return (Criteria) this;
        }

        public Criteria andBlockOffsetGreaterThanOrEqualTo(Integer value) {
            addCriterion("BLOCK_OFFSET >=", value, "blockOffset");
            return (Criteria) this;
        }

        public Criteria andBlockOffsetLessThan(Integer value) {
            addCriterion("BLOCK_OFFSET <", value, "blockOffset");
            return (Criteria) this;
        }

        public Criteria andBlockOffsetLessThanOrEqualTo(Integer value) {
            addCriterion("BLOCK_OFFSET <=", value, "blockOffset");
            return (Criteria) this;
        }

        public Criteria andBlockOffsetIn(List<Integer> values) {
            addCriterion("BLOCK_OFFSET in", values, "blockOffset");
            return (Criteria) this;
        }

        public Criteria andBlockOffsetNotIn(List<Integer> values) {
            addCriterion("BLOCK_OFFSET not in", values, "blockOffset");
            return (Criteria) this;
        }

        public Criteria andBlockOffsetBetween(Integer value1, Integer value2) {
            addCriterion("BLOCK_OFFSET between", value1, value2, "blockOffset");
            return (Criteria) this;
        }

        public Criteria andBlockOffsetNotBetween(Integer value1, Integer value2) {
            addCriterion("BLOCK_OFFSET not between", value1, value2, "blockOffset");
            return (Criteria) this;
        }

        public Criteria andBlockCountIsNull() {
            addCriterion("BLOCK_COUNT is null");
            return (Criteria) this;
        }

        public Criteria andBlockCountIsNotNull() {
            addCriterion("BLOCK_COUNT is not null");
            return (Criteria) this;
        }

        public Criteria andBlockCountEqualTo(Integer value) {
            addCriterion("BLOCK_COUNT =", value, "blockCount");
            return (Criteria) this;
        }

        public Criteria andBlockCountNotEqualTo(Integer value) {
            addCriterion("BLOCK_COUNT <>", value, "blockCount");
            return (Criteria) this;
        }

        public Criteria andBlockCountGreaterThan(Integer value) {
            addCriterion("BLOCK_COUNT >", value, "blockCount");
            return (Criteria) this;
        }

        public Criteria andBlockCountGreaterThanOrEqualTo(Integer value) {
            addCriterion("BLOCK_COUNT >=", value, "blockCount");
            return (Criteria) this;
        }

        public Criteria andBlockCountLessThan(Integer value) {
            addCriterion("BLOCK_COUNT <", value, "blockCount");
            return (Criteria) this;
        }

        public Criteria andBlockCountLessThanOrEqualTo(Integer value) {
            addCriterion("BLOCK_COUNT <=", value, "blockCount");
            return (Criteria) this;
        }

        public Criteria andBlockCountIn(List<Integer> values) {
            addCriterion("BLOCK_COUNT in", values, "blockCount");
            return (Criteria) this;
        }

        public Criteria andBlockCountNotIn(List<Integer> values) {
            addCriterion("BLOCK_COUNT not in", values, "blockCount");
            return (Criteria) this;
        }

        public Criteria andBlockCountBetween(Integer value1, Integer value2) {
            addCriterion("BLOCK_COUNT between", value1, value2, "blockCount");
            return (Criteria) this;
        }

        public Criteria andBlockCountNotBetween(Integer value1, Integer value2) {
            addCriterion("BLOCK_COUNT not between", value1, value2, "blockCount");
            return (Criteria) this;
        }

        public Criteria andPartOffsetIsNull() {
            addCriterion("PART_OFFSET is null");
            return (Criteria) this;
        }

        public Criteria andPartOffsetIsNotNull() {
            addCriterion("PART_OFFSET is not null");
            return (Criteria) this;
        }

        public Criteria andPartOffsetEqualTo(Long value) {
            addCriterion("PART_OFFSET =", value, "partOffset");
            return (Criteria) this;
        }

        public Criteria andPartOffsetNotEqualTo(Long value) {
            addCriterion("PART_OFFSET <>", value, "partOffset");
            return (Criteria) this;
        }

        public Criteria andPartOffsetGreaterThan(Long value) {
            addCriterion("PART_OFFSET >", value, "partOffset");
            return (Criteria) this;
        }

        public Criteria andPartOffsetGreaterThanOrEqualTo(Long value) {
            addCriterion("PART_OFFSET >=", value, "partOffset");
            return (Criteria) this;
        }

        public Criteria andPartOffsetLessThan(Long value) {
            addCriterion("PART_OFFSET <", value, "partOffset");
            return (Criteria) this;
        }

        public Criteria andPartOffsetLessThanOrEqualTo(Long value) {
            addCriterion("PART_OFFSET <=", value, "partOffset");
            return (Criteria) this;
        }

        public Criteria andPartOffsetIn(List<Long> values) {
            addCriterion("PART_OFFSET in", values, "partOffset");
            return (Criteria) this;
        }

        public Criteria andPartOffsetNotIn(List<Long> values) {
            addCriterion("PART_OFFSET not in", values, "partOffset");
            return (Criteria) this;
        }

        public Criteria andPartOffsetBetween(Long value1, Long value2) {
            addCriterion("PART_OFFSET between", value1, value2, "partOffset");
            return (Criteria) this;
        }

        public Criteria andPartOffsetNotBetween(Long value1, Long value2) {
            addCriterion("PART_OFFSET not between", value1, value2, "partOffset");
            return (Criteria) this;
        }

        public Criteria andPartLengthIsNull() {
            addCriterion("PART_LENGTH is null");
            return (Criteria) this;
        }

        public Criteria andPartLengthIsNotNull() {
            addCriterion("PART_LENGTH is not null");
            return (Criteria) this;
        }

        public Criteria andPartLengthEqualTo(Long value) {
            addCriterion("PART_LENGTH =", value, "partLength");
            return (Criteria) this;
        }

        public Criteria andPartLengthNotEqualTo(Long value) {
            addCriterion("PART_LENGTH <>", value, "partLength");
            return (Criteria) this;
        }

        public Criteria andPartLengthGreaterThan(Long value) {
            addCriterion("PART_LENGTH >", value, "partLength");
            return (Criteria) this;
        }

        public Criteria andPartLengthGreaterThanOrEqualTo(Long value) {
            addCriterion("PART_LENGTH >=", value, "partLength");
            return (Criteria) this;
        }

        public Criteria andPartLengthLessThan(Long value) {
            addCriterion("PART_LENGTH <", value, "partLength");
            return (Criteria) this;
        }

        public Criteria andPartLengthLessThanOrEqualTo(Long value) {
            addCriterion("PART_LENGTH <=", value, "partLength");
            return (Criteria) this;
        }

        public Criteria andPartLengthIn(List<Long> values) {
            addCriterion("PART_LENGTH in", values, "partLength");
            return (Criteria) this;
        }

        public Criteria andPartLengthNotIn(List<Long> values) {
            addCriterion("PART_LENGTH not in", values, "partLength");
            return (Criteria) this;
        }

        public Criteria andPartLengthBetween(Long value1, Long value2) {
            addCriterion("PART_LENGTH between", value1, value2, "partLength");
            return (Criteria) this;
        }

        public Criteria andPartLengthNotBetween(Long value1, Long value2) {
            addCriterion("PART_LENGTH not between", value1, value2, "partLength");
            return (Criteria) this;
        }

        public Criteria andPartBytesIsNull() {
            addCriterion("PART_BYTES is null");
            return (Criteria) this;
        }

        public Criteria andPartBytesIsNotNull() {
            addCriterion("PART_BYTES is not null");
            return (Criteria) this;
        }

        public Criteria andPartBytesEqualTo(Long value) {
            addCriterion("PART_BYTES =", value, "partBytes");
            return (Criteria) this;
        }

        public Criteria andPartBytesNotEqualTo(Long value) {
            addCriterion("PART_BYTES <>", value, "partBytes");
            return (Criteria) this;
        }

        public Criteria andPartBytesGreaterThan(Long value) {
            addCriterion("PART_BYTES >", value, "partBytes");
            return (Criteria) this;
        }

        public Criteria andPartBytesGreaterThanOrEqualTo(Long value) {
            addCriterion("PART_BYTES >=", value, "partBytes");
            return (Criteria) this;
        }

        public Criteria andPartBytesLessThan(Long value) {
            addCriterion("PART_BYTES <", value, "partBytes");
            return (Criteria) this;
        }

        public Criteria andPartBytesLessThanOrEqualTo(Long value) {
            addCriterion("PART_BYTES <=", value, "partBytes");
            return (Criteria) this;
        }

        public Criteria andPartBytesIn(List<Long> values) {
            addCriterion("PART_BYTES in", values, "partBytes");
            return (Criteria) this;
        }

        public Criteria andPartBytesNotIn(List<Long> values) {
            addCriterion("PART_BYTES not in", values, "partBytes");
            return (Criteria) this;
        }

        public Criteria andPartBytesBetween(Long value1, Long value2) {
            addCriterion("PART_BYTES between", value1, value2, "partBytes");
            return (Criteria) this;
        }

        public Criteria andPartBytesNotBetween(Long value1, Long value2) {
            addCriterion("PART_BYTES not between", value1, value2, "partBytes");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table SYSTEM_LOBS.PARTS
     *
     * @mbggenerated do_not_delete_during_merge Sat Mar 21 14:24:50 ICT 2015
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table SYSTEM_LOBS.PARTS
     *
     * @mbggenerated Sat Mar 21 14:24:50 ICT 2015
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}